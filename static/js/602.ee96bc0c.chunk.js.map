{"version":3,"file":"static/js/602.ee96bc0c.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport noImage from '../../images/no-image.jpg';\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  &:hover {\n    color: #6d4b88;\n  }\n\n  &:hover::after,\n  &:focus::after {\n    content: '';\n    background-image: ${props =>\n      props.cover\n        ? `url('https://image.tmdb.org/t/p/w500/${props.cover}')`\n        : `url(${noImage})`};\n    background-size: cover;\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    z-index: 1;\n    display: block;\n    width: 400px;\n    height: 560px;\n    border-radius: 4px;\n    border: none;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  }\n`;\n","import { useLocation } from 'react-router-dom';\n\nimport { Item, MovieLink } from './MovieList.styled';\n\nexport const MovieList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink\n            to={`/movies/${film.id}`}\n            state={{ from: location }}\n            cover={film.poster_path}\n          >\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  width: 240px;\n  height: 40px;\n  margin-right: 8px;\n  padding: 10px 15px;\n  border-radius: 6px;\n  border: 1px solid #9371ae;\n  outline: 1px solid #6d4b88;\n  font-size: 16px;\n`;\n\nexport const FormButton = styled.button`\n  margin-bottom: 20px;\n  padding: 10px 15px;\n  font-size: 16px;\n  background-color: #6d4b88;\n  border-radius: 6px;\n  border: none;\n  box-shadow: rgba(50, 50, 93, 0.1) 0 0 0 1px inset,\n    rgba(50, 50, 93, 0.1) 0 2px 5px 0, rgba(0, 0, 0, 0.07) 0 1px 1px 0;\n  box-sizing: border-box;\n  color: #fff;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    box-shadow: rgba(50, 50, 93, 0.1) 0 0 0 1px inset,\n      rgba(50, 50, 93, 0.2) 0 6px 15px 0, rgba(0, 0, 0, 0.1) 0 2px 2px 0,\n      rgba(50, 151, 211, 0.3) 0 0 0 4px;\n  }\n`;\n","import { useState } from 'react';\nimport { Input, FormButton } from './Form.styled';\n\nexport const Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const onInputChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={onInputChange}\n        placeholder=\"Enter Movie\"\n      />\n      <FormButton type=\"submit\">Search</FormButton>\n    </form>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchQuery } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { Form } from 'components/Form/Form';\nimport { MovieList } from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const [invalidRequest, setInvalidRequest] = useState(false);\n\n  const movieName = searchParams.get('query') || '';\n\n  const updateQuery = query => {\n    const params = query !== '' && { query };\n    setSearchParams(params);\n    setInvalidRequest(false);\n  };\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        setLoading(true);\n        const movies = await getSearchQuery(movieName);\n        setSearchFilms(movies);\n        setInvalidRequest(movies.length === 0 && movieName !== '');\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    search();\n  }, [movieName]);\n\n  return (\n    <main>\n      <Form searchMovies={updateQuery} />\n      {loading && <Loader />}\n      {invalidRequest && (\n        <p>There are no movies with this request. Please, try again...</p>\n      )}\n\n      {searchFilms.length > 0 && <MovieList films={searchFilms} />}\n    </main>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '6498fc8ca7823e31f972fc635d8e33da';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const getSearchQuery = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["Item","styled","_templateObject","_taggedTemplateLiteral","MovieLink","Link","_templateObject2","props","cover","concat","noImage","MovieList","_ref","films","location","useLocation","_jsx","children","map","film","to","id","state","from","poster_path","title","Input","FormButton","Form","searchMovies","_useState","useState","_useState2","_slicedToArray","query","setQuery","_jsxs","onSubmit","e","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","placeholder","searchFilms","setSearchFilms","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","loading","setLoading","_useState5","_useState6","invalidRequest","setInvalidRequest","movieName","get","useEffect","search","_asyncToGenerator","_regeneratorRuntime","_callee","movies","_context","prev","next","getSearchQuery","sent","length","t0","console","log","finish","stop","apply","arguments","Loader","axios","API_KEY","getTrending","response","abrupt","data","results","_ref2","_callee2","_context2","_x","getMovieDetails","_ref3","_callee3","movieId","_context3","_x2","getActors","_ref4","_callee4","_context4","cast","_x3","getReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}